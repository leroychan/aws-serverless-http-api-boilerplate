// Initialize Module(s)
const AWSXRay = require('aws-xray-sdk');
const AWS = AWSXRay.captureAWS(require('aws-sdk'));
const docClient = new AWS.DynamoDB.DocumentClient({ apiVersion: '2012-08-10' });
const logger = require('./logger');

/**
 * Get All Records in DynamoDB
 * @param {string} tableName DynamoDB table name
 * @param {Object} context Request context that are meant for logging
 * @param {Object} performance Performance object meant for finding out execution time
 * @return {Object} Records or failure object from DynamoDB
 */
const getRecords = async (tableName, context, performance) => {
  performance.mark(`dynamodb:${tableName}:record:getAll:start`);
  try {
    const params = {
      TableName: tableName,
    };
    const result = await docClient.scan(params).promise();
    performance.mark(`dynamodb:${tableName}:record:getAll:end`);
    performance.measure(
      `measure:dynamodb:${tableName}:getAll`,
      `dynamodb:${tableName}:record:getAll:start`,
      `dynamodb:${tableName}:record:getAll:end`,
    );
    logger.info(result, {
      functionName: `utils:dynamodb:${tableName}:getRecords`,
      logType: 'dynamodb:getAll:result',
      ...context,
    });
    return result;
  } catch (err) {
    performance.mark(`dynamodb:${tableName}:record:getAll:failure:end`);
    performance.measure(
      `measure:dynamodb:${tableName}:getAll:failure`,
      `dynamodb:${tableName}:record:getAll:start`,
      `dynamodb:${tableName}:record:getAll:failure:end`,
    );
    logger.error(err, {
      functionName: `utils:dynamodb:${tableName}:getRecords`,
      logType: 'dynamodb:getAll:result',
      ...context,
    });
    return err;
  }
};

/**
 * Get Record by Id in DynamoDB
 * @param {string} tableName DynamoDB table name
 * @param {Object} key Id of record in DynamoDB
 * @param {Object} context Request context that are meant for logging
 * @param {Object} performance Performance object meant for finding out execution time
 * @return {Object} Record or failure object from DynamoDB
 */
const getRecordById = async (tableName, key, context, performance) => {
  performance.mark(`dynamodb:${tableName}:record:getRecordById:start`);
  try {
    const params = {
      TableName: tableName,
      Key: {
        ...key,
      },
    };
    const result = await docClient.get(params).promise();
    performance.mark(`dynamodb:${tableName}:record:getRecordById:end`);
    performance.measure(
      `measure:dynamodb:${tableName}:getRecordById`,
      `dynamodb:${tableName}:record:getRecordById:start`,
      `dynamodb:${tableName}:record:getRecordById:end`,
    );
    logger.info(result, {
      functionName: `utils:dynamodb:${tableName}:getRecordById`,
      logType: 'dynamodb:getRecordById:result',
      ...context,
    });
    return result;
  } catch (err) {
    performance.mark(`dynamodb:${tableName}:record:getRecordById:failure:end`);
    performance.measure(
      `measure:dynamodb:${tableName}:getRecordById:failure`,
      `dynamodb:${tableName}:record:getRecordById:start`,
      `dynamodb:${tableName}:record:getRecordById:failure:end`,
    );
    logger.error(err, {
      functionName: `utils:dynamodb:${tableName}:getRecord`,
      logType: 'dynamodb:getRecordById:result',
      ...context,
    });
    return err;
  }
};

/**
 * Delete Record by Id in DynamoDB
 * @param {string} tableName DynamoDB table name
 * @param {Object} key Id of record in DynamoDB to delete
 * @param {Object} context Request context that are meant for logging
 * @param {Object} performance Performance object meant for finding out execution time
 * @return {Object} Record or failure object from DynamoDB
 */
const deleteRecordById = async (tableName, key, context, performance) => {
  performance.mark(`dynamodb:${tableName}:record:deleteRecordById:start`);
  try {
    const params = {
      TableName: tableName,
      Key: {
        ...key,
      },
    };
    const result = await docClient.delete(params).promise();
    console.log(result);
    performance.mark(`dynamodb:${tableName}:record:deleteRecordById:end`);
    performance.measure(
      `measure:dynamodb:${tableName}:deleteRecordById`,
      `dynamodb:${tableName}:record:deleteRecordById:start`,
      `dynamodb:${tableName}:record:deleteRecordById:end`,
    );
    logger.info(result, {
      functionName: `utils:dynamodb:${tableName}:deleteRecordById`,
      logType: 'dynamodb:deleteRecordById:result',
      ...context,
    });
    return result;
  } catch (err) {
    performance.mark(`dynamodb:${tableName}:record:deleteRecordById:failure:end`);
    performance.measure(
      `measure:dynamodb:${tableName}:deleteRecordById:failure`,
      `dynamodb:${tableName}:record:deleteRecordById:start`,
      `dynamodb:${tableName}:record:deleteRecordById:failure:end`,
    );
    logger.error(err, {
      functionName: `utils:dynamodb:${tableName}:deleteRecordById`,
      logType: 'dynamodb:deleteRecordById:result',
      ...context,
    });
    return err;
  }
};

/**
 * Create or Update Record in DynamoDB
 * @param {string} tableName DynamoDB table name
 * @param {Object} payload Payload to be written in DynamoDB
 * @param {Object} context Request context that are meant for logging
 * @param {Object} performance Performance object meant for finding out execution time
 * @return {Object} Success or failure object from DynamoDB
 */
const createOrUpdateRecord = async (tableName, payload, context, performance) => {
  performance.mark(`dynamodb:${tableName}:record:put:start`);
  try {
    const params = {
      TableName: tableName,
      Item: {
        ...payload,
      },
    };
    const result = await docClient.put(params).promise();
    performance.mark(`dynamodb:${tableName}:record:put:end`);
    performance.measure(
      `measure:dynamodb:${tableName}:put`,
      `dynamodb:${tableName}:record:put:start`,
      `dynamodb:${tableName}:record:put:end`,
    );
    logger.info(result, {
      functionName: `utils:dynamodb:${tableName}:createOrUpdateRecord`,
      logType: 'dynamodb:put:result',
      ...context,
    });
    return result;
  } catch (err) {
    performance.mark(`dynamodb:${tableName}:record:put:failure:end`);
    performance.measure(
      `measure:dynamodb:${tableName}:put:failure`,
      `dynamodb:${tableName}:record:put:start`,
      `dynamodb:${tableName}:record:put:failure:end`,
    );
    logger.error(err, {
      functionName: `utils:dynamodb:${tableName}:createOrUpdateRecord`,
      logType: 'dynamodb:put:result',
      ...context,
    });
    return err;
  }
};

module.exports = {
  getRecords,
  getRecordById,
  createOrUpdateRecord,
  deleteRecordById,
};
